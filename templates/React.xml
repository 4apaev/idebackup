<templateSet group="React">
  <template name="rcc" value="import React, { Component, Fragment as Frag } from 'react'&#10;import PT from 'prop-types'&#10;&#10;export default class $TM_FILENAME_BASE$ extends Component {&#10;  static propTypes = {&#10;    name: PT.string.isRequired&#10;  }&#10;  &#10;  static defaultProps = {&#10;    name: 'shoshi'&#10;  }&#10;  &#10;  state = { open: true }&#10;  &#10;  onClick = e =&gt; {&#10;    const { name, value } = e.target&#10;    this.setState({ [ name ]: value })&#10;  }&#10;  &#10;  render() {&#10;    return (&#10;      &lt;&gt;&#10;        $END$&#10;      &lt;/&gt;&#10;    )&#10;  }&#10;  &#10;  componentDidMount() {}&#10;  componentWillMount() {}&#10;  componentWillUnmount() {}&#10;  componentDidUpdate(prevp, prevs) {}&#10;  componentWillUpdate(nextp, nexts) {}&#10;  componentWillReceiveProps(nextp) {}&#10;  shouldComponentUpdate(nextp, nexts) {}&#10;}" description="Creates a React component class with ES6 module system" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="Ctor" alwaysStopAt="true" />
    <context />
  </template>
  <template name="rrc" value="import '$STYLE$.styl'&#10;import PT from 'prop-types'&#10;import React, { Component, Fragment as Frag } from 'react'&#10;import { connect } from 'react-redux'&#10;&#10;class $COMP$ extends Component {&#10;  static propTypes = {&#10;    name: PT.string.isRequired,&#10;    data: PT.object.isRequired,&#10;    error: PT.any,&#10;    loading: PT.bool,&#10;  }&#10;  &#10;  static defaultProps = {&#10;    name: 'shoshi',&#10;    data: {},&#10;    error: null,&#10;    loading: false,&#10;  }&#10;  &#10;  state = { open: true }&#10;  &#10;  onClick = e =&gt; {&#10;    const { name, value } = e.target&#10;    this.setState({ [ name ]: value })&#10;  }&#10;  &#10;  Show = ({ val, color='#777' }) =&gt; val&#10;    ? &lt;h3 style={{ color }}&gt;{ txt }&lt;/h3&gt;&#10;    : null&#10;  &#10;  render() {&#10;    const { Show, props } = this&#10;    return (&#10;      &lt;&gt;&#10;        &lt;h2&gt;{ props.name }&lt;/h2&gt;&#10;        &lt;Show color=&quot;tomato&quot; val={ props.error } /&gt;&#10;        &lt;Show color=&quot;skyblue&quot; val={ props.loading &amp;&amp; 'Loading...' } /&gt;&#10;        $END$&#10;      &lt;/&gt;&#10;    )&#10;  }&#10;  &#10;  componentDidMount() {}&#10;  componentWillMount() {}&#10;  componentWillUnmount() {}&#10;  componentDidUpdate(prevp, prevs) {}&#10;  componentWillUpdate(nextp, nexts) {}&#10;  componentWillReceiveProps(nextp) {}&#10;  shouldComponentUpdate(nextp, nexts) {}&#10;}&#10;&#10;export default connect(state =&gt; ({&#10;  data: state.$COMP$.data,&#10;  error: state.$COMP$.error,&#10;  loading: state.$COMP$.loading,&#10;}), {&#10;  get(payload) { return dispatch =&gt; dispatch({ type: '$COMP$_GET', payload }) },&#10;  post(payload) { return dispatch =&gt; dispatch({ type: '$COMP$_POST', payload }) },&#10;  reset() { return dispatch =&gt; dispatch({ type: '$COMP$_RESET', payload: { error: null, loading: false }}) },&#10;})($COMP$)" description="Creates a React component class connected to redux" toReformat="true" toShortenFQNames="true">
    <variable name="STYLE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="COMP" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
</templateSet>